version: 2.1
orbs:
    sonarcloud: sonarsource/sonarcloud@3.0.1
commands:
    create-artifacts-dir:
        description: "Create coverage directory"
        steps:
            - run:
                  name: Create coverage directory
                  command: mkdir -p ./coverage
            - run:
                  name: Create lint directory
                  command: mkdir -p ./lint
    node-install:
        description: "Install Node.js dependencies"
        steps:
            - run:
                  name: Install dependencies
                  command: npm ci
    node-linter:
        description: "Run ESLint with HTML output"
        steps:
            - run:
                  name: Run linter
                  command: npm run lint -- --format html --output-file ./lint/index.html
            - store_artifacts:
                  path: ./lint
    node-test:
        description: "Run Mocha test suite with reports"
        steps:
            - run:
                  name: Run unit tests
                  command: npm run test -- --reporter mocha-multi-reporters --reporter-options configFile=./test/reporter-config.json
                  environment:
                      MOCHAWESOME_REPORTFILENAME: index.html
                      MOCHAWESOME_REPORTDIR: ./coverage/unit-test
            - store_test_results:
                  path: ./coverage
            - store_artifacts:
                  path: ./coverage
    node-coverage:
        description: "Generate NYC coverage report"
        steps:
            - run:
                  name: Generate coverage report
                  command: npm run report
            - store_artifacts:
                  path: ./coverage
    node-package:
        description: "Create npm package tarball"
        steps:
            - run:
                  name: Create acai package tarball
                  command: |
                      rm -f acai-*.tgz
                      npm pack
    postman-integration-run:
        description: "Run integration Postman suite against Serverless Offline"
        parameters:
            auto_validate:
                type: string
        steps:
            - run:
                  name: Install integration dependencies
                  command: npm install
                  working_directory: test/integration
            - run:
                  name: Install local tarball
                  command: npm install ../../acai-*.tgz
                  working_directory: test/integration
            - run:
                  name: Start Serverless Offline
                  command: |
                      AUTO_VALIDATE=<<parameters.auto_validate>> npx serverless offline --config serverless.yml
                  working_directory: test/integration
                  background: true
            - run:
                  name: Wait for Serverless Offline
                  command: |
                      for i in {1..20}; do
                          curl -s --fail http://localhost:3000/int-test/v1/hello-world >/dev/null && exit 0
                          sleep 3
                      done
                      echo "Serverless failed to start" >&2
                      exit 1
            - run:
                  name: Run Postman collection
                  command: npx newman run test/integration/postman/acai-integration.postman_collection.json -e test/integration/postman/acai-integration.postman_environment.json --reporters cli,html,junit --reporter-html-export coverage/index.html --reporter-junit-export coverage/junit.xml --env-var base_url=http://127.0.0.1:3000/int-test --env-var api_key=integration-key --env-var nested_id=demo-id
    npm-deploy:
        description: "Publish package to NPM with beta tag detection"
        steps:
            - run:
                  name: Authenticate with NPM
                  command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
            - run:
                  name: Set package version from tag
                  command: npm version $CIRCLE_TAG --allow-same-version --no-git-tag-version
            - run:
                  name: Publish to NPM
                  command: |
                      if echo "$CIRCLE_TAG" | grep -iq "beta"; then
                          echo "Beta version detected in tag: $CIRCLE_TAG"
                          echo "Publishing with --tag beta"
                          npm publish --access public --tag beta
                      else
                          echo "Stable version detected in tag: $CIRCLE_TAG"
                          echo "Publishing to latest"
                          npm publish --access public
                      fi
jobs:
    install-test-deploy:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - checkout:
                  method: full
            - node-install
            - npm-deploy
    install:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - checkout:
                  method: full
            - node-install
            - persist_to_workspace:
                  root: ~/project
                  paths:
                      - ./*
    lint:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                  at: ~/project
            - create-artifacts-dir
            - node-linter
    test:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                  at: ~/project
            - create-artifacts-dir
            - node-test
    coverage:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                  at: ~/project
            - create-artifacts-dir
            - node-test
            - node-coverage
            - sonarcloud/scan
    integration-test-auto-validate-false:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                  at: ~/project
            - node-package
            - postman-integration-run:
                  auto_validate: "false"
    integration-test-auto-validate-true:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                  at: ~/project
            - node-package
            - postman-integration-run:
                  auto_validate: "true"
workflows:
    install-test-workflow:
        jobs:
            - install
            - lint:
                  requires:
                      - install
            - test:
                  requires:
                      - install
            - coverage:
                  context:
                      - sonarcloud
                  requires:
                      - install
            - integration-test-auto-validate-false:
                  requires:
                      - install
            - integration-test-auto-validate-true:
                  requires:
                      - install
    install-deploy-workflow:
        jobs:
            - install-test-deploy:
                  filters:
                      tags:
                          only: /.*/
                      branches:
                          ignore: /.*/
